package com.jhta.cope.controller;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.jhta.cope.handler.ChatHandler;
import com.jhta.cope.service.ChatService;
import com.jhta.cope.service.PaidLectureService;
import com.jhta.cope.service.QnaService;
import com.jhta.cope.service.UserService;
import com.jhta.cope.util.EtcUtils;
import com.jhta.cope.util.SessionUtils;
import com.jhta.cope.vo.Badge;
import com.jhta.cope.vo.Chat;
import com.jhta.cope.vo.Follow;
import com.jhta.cope.vo.Qna;
import com.jhta.cope.vo.QnaAnswer;
import com.jhta.cope.vo.QnaComment;
import com.jhta.cope.vo.User;

@Controller
@RequestMapping("/user/my/*")
public class UserController {

	@Autowired
	UserService userService;
	@Autowired
	QnaService qnaService;
	@Autowired
	ChatService chatService;
	@Autowired
	PaidLectureService paidLectureService;

	@Resource(name = "iconPath")
	String iconPath;

	@RequestMapping("/home")
	public String home() {
		return "user/my_home";
	}

	@RequestMapping("/video")
	public String video() {
		return "user/my_video";
	}

	@RequestMapping("/dashboard")
	public String dashboard() {
		return "user/my_dashboard";
	}

	@RequestMapping("/chat")
	public String chat(Model model) {
		model.addAttribute("friends", ChatHandler.getAllOnUsers());
		return "user/my_chat";
	}

	@RequestMapping("/chat/getAll")
	@ResponseBody
	public List<Chat> getAllChat(String recvUserId) {
		User user = (User) SessionUtils.getAttribute("LOGIN_USER");
		Chat chat = new Chat().setRecvUser(new User().setId(recvUserId)).setSendUser(user);

		chat.setRecvUser(new User().setId(recvUserId));
		List<Chat> chats = chatService.getChats(chat);
		return chats;
	}

	// 스탯
	@RequestMapping("/stat")
	public String stat(Model model) {
		User user = (User) SessionUtils.getAttribute("LOGIN_USER");
		List<Badge> notHaveBadges = userService.notHaveBadge(user.getNo());
		List<Badge> haveBadges = userService.haveBadge(user.getNo());
		model.addAttribute("notHave", notHaveBadges);
		model.addAttribute("have", haveBadges);
		return "user/my_stat";
	}

	// 작성 글
	@RequestMapping("/write")
	public String write(Model model) {
		User user = (User) SessionUtils.getAttribute("LOGIN_USER");
		List<Qna> qnas = qnaService.getQnaByUserNo(user.getNo());
		List<QnaComment> comments = qnaService.getCommentByUserNo(user.getNo());
		List<QnaAnswer> answers = qnaService.getAnswerByUserNo(user.getNo());
		String reg = "<(/)?([a-zA-Z]*)(\\\\s[a-zA-Z]*=[^>]*)?(\\\\s)*(/)?>";
		for (QnaAnswer qnaAnswer : answers) {
			qnaAnswer.setContents(qnaAnswer.getContents().replaceAll(reg, ""));
		}
		for (Qna qna : qnas) {
			qna.setTitle(qna.getTitle().replaceAll(reg, ""));
		}
		model.addAttribute("qnas", qnas);
		model.addAttribute("comments", comments);
		model.addAttribute("answers", answers);

		return "user/my_write";
	}

	@RequestMapping("/info")
	public String info(Model model) {
		return "user/my_info";
	}

	@RequestMapping(value = "/iconmodify", method = RequestMethod.POST, produces = MediaType.TEXT_PLAIN_VALUE)
	@ResponseBody
	public String iconModify(MultipartHttpServletRequest mr) throws UnsupportedEncodingException {
		MultipartFile mf = mr.getFile("file");
		String today = new SimpleDateFormat("ddhhmmss").format(new Date());
		String fileName = today + mf.getOriginalFilename();
		String path = "/resources/img/user/icon/";
		try {
			mf.transferTo(new File(iconPath, fileName));
			EtcUtils.saveFile(mr, iconPath, path, fileName);
			User user = (User) SessionUtils.getAttribute("LOGIN_USER");
			user.getAvatar().setImage(fileName);
			userService.updateAvatar(user.getAvatar());
		} catch (IllegalStateException | IOException e) {
			e.printStackTrace();
		}
		return URLEncoder.encode(fileName, "UTF-8");
	}

	@RequestMapping(value = "/bgmodify", method = RequestMethod.POST, produces = MediaType.TEXT_PLAIN_VALUE)
	@ResponseBody
	public String backgroundModify(MultipartHttpServletRequest mr) throws UnsupportedEncodingException {
		MultipartFile mf = mr.getFile("file");
		String today = new SimpleDateFormat("ddhhmmss").format(new Date());
		String fileName = today + mf.getOriginalFilename();
		String path = "/resources/img/user/background/";
		try {
			mf.transferTo(new File("C:/project/codepeople/src/main/webapp/resources/img/user/background", fileName));
			EtcUtils.saveFile(mr, "C:/project/codepeople/src/main/webapp/resources/img/user/background", path,
					fileName);
			User user = (User) SessionUtils.getAttribute("LOGIN_USER");
			user.getAvatar().setBgImg(fileName);
			userService.updateAvatar(user.getAvatar());
		} catch (IllegalStateException | IOException e) {
			e.printStackTrace();
		}
		return URLEncoder.encode(fileName, "UTF-8");
	}

	@RequestMapping(value = "/icondel")
	@ResponseBody
	public void iconDel() {
		User user = (User) SessionUtils.getAttribute("LOGIN_USER");
		user.getAvatar().setImage("Default");
		userService.updateAvatar(user.getAvatar());
	}
	
	@RequestMapping(value = "/following")
	@ResponseBody
	public Follow following(String followerId) {
		System.out.println(followerId);
		User user = (User) SessionUtils.getAttribute("LOGIN_USER");
		Follow follow= new Follow();
		follow.setFollower(new User().setId(followerId));
		follow.setFollowing(user);
		Follow checkingFollow = userService.myFollowChecking(follow);
		System.out.println(follow);
		if(checkingFollow == null) {
			userService.insertFollow(follow);
			return follow;
		}else {
			return checkingFollow;
		}
	}
	
}
