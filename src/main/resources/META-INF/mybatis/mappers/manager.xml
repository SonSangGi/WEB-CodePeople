<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.jhta.cope.dao.ManagerDao">
	
	<resultMap type="Qna" id="getQnaByNoResultMap">
		<id column="QNA_NO" property="no" />
		<result column="rn" property="rn" />
		<result column="QNA_TITLE" property="title" />
		<result column="QNA_CONTENTS" property="contents" />
		<result column="QNA_CREATE_DATE" property="createDate" />
		<result column="QNA_VIEWS" property="views" />
		<result column="QNA_AVAILABLE" property="available" />
		<association column="QNA_WRITER" property="writer"
			javaType="User" select="com.jhta.cope.dao.ManagerDao.getUserByNo" />
		<collection property="answers" column="QNA_NO"
			javaType="java.util.ArrayList" ofType="QnaAnswer"
			select="getQnaAnswerByNo" />
	</resultMap>
	
	<resultMap type="QnaAnswer" id="getAnswerByNoResultMap">
		<id column="ANSWER_NO" property="no" />
		<result column="rn" property="rn" />
		<result column="ANSWER_CONTENTS" property="contents" />
		<result column="ANSWER_CREATE_DATE" property="createDate" />
		<result column="QNA_NO" property="qnaNo" />
		<result column="ANSWER_AVAILABLE" property="available" />
		<association column="ANSWER_WRITER" property="writer"
			javaType="User" select="com.jhta.cope.dao.UserDao.getUserByNo" />
	</resultMap>
	
	<resultMap type="PaidLecture" id="getPaidLectureAndInstructor">
		<id column="PAID_LECTURE_NO" property="no" />
		<result column="LECTURE_LANG" property="lang" />
		<result column="LECTURE_TITLE" property="title" />
		<result column="LECTURE_LEVEL" property="level" />
		<result column="LECTURE_SPECIALIZED" property="specialized" />
		<result column="LECTURE_SUMMARY" property="summary" />
		<result column="LECTURE_DESCRIPTION" property="description" />
		<result column="LECTURE_PRICE" property="price" />
		<result column="LECTURE_THUMNAIL_PATH" property="thumbnail" />
		<result column="LECTURE_CREATE_DATE" property="createDate" />
		<result column="LECTURE_LIKES" property="like" />
		<result column="LECTURE_VIEW_COUNT" property="viewCount" />
		<result column="EXPOSURE_STATUS" property="exposureStatus" />
		<result column="APPROVE_STATUS" property="approveStatus" />
		<association column="INSTRUCTOR_NO" property="instructor" javaType="Instructor" select="getInstructorByNo" />
	</resultMap>
	
	<resultMap type="Instructor" id="InstructorInfo">
		<id column="INSTRUCTOR_NO" property="no" />
		<result column="INSTRUCTOR_SUMMARY" property="summary" />
		<result column="INSTRUCTOR_DESCRIPTION" property="description" />
		<association column="USER_NO" property="user" javaType="User" select="getUserByNo" />
	</resultMap>
	
	<select id="getAllUser" resultType="User">
		select
			USER_NO				as no,
			USER_ID				as id,
			USER_EMAIL			as email,
			USER_NAME			as name,
			USER_CREATE_DATE	as createDate,
			USER_AUTH_STATUS	as authStatus
		from
			USERS
		order by
			USER_NO desc
	</select>
	
	<select id="getUserByName" parameterType="String" resultType="User">
		select
			USER_NO				as no,
			USER_ID				as id,
			USER_EMAIL			as email,
			USER_NAME			as name,
			USER_CREATE_DATE	as createDate,
			USER_AUTH_STATUS	as authStatus
		from
			USERS
		where
			USER_NAME = #{value}
	</select>
	
	<select id="getUserByNo" parameterType="int" resultType="User">
		select
			USER_NO				as "no",
			USER_ID				as "id",
			USER_EMAIL			as email,
			USER_NAME			as "name",
			USER_CREATE_DATE	as createDate,
			USER_AUTH_STATUS	as authStatus
		from
			USERS
		where
			USER_NO = #{value}
	</select>

	<select id="getUserById" parameterType="String" resultType="User">
		select
			USER_NO				as no,
			USER_ID				as id,
			USER_EMAIL			as email,
			USER_NAME			as name,
			USER_CREATE_DATE	as createDate,
			USER_AUTH_STATUS	as authStatus
		from
			USERS
		where
			USER_ID like '%' || #{value} || '%' and USER_AUTH_STATUS != 0
	</select>
	
	<update id="deleteTeacherByNo" parameterType="int">
		update
			USERS
		set
			USER_AUTH_STATUS = '-2'
		where
			USER_NO = #{value}
	</update>
	
	<update id="deleteStudentByNo" parameterType="int">
		update
			USERS
		set
			USER_AUTH_STATUS = '-1'
		where
			USER_NO = #{value}
	</update>
	
	<update id="recoverTeacherByNo" parameterType="int">
		update
			USERS
		set
			USER_AUTH_STATUS = '2'
		where
			USER_NO = #{value}
	</update>
	
	<update id="recoverStudentByNo" parameterType="int">
		update
			USERS
		set
			USER_AUTH_STATUS = '1'
		where
			USER_NO = #{value}
	</update>
	
	<update id="deleteFreeLectureByNo" parameterType="int">
		update
			FREE_LECTURE
		set
			LECTURE_AVAILABLE = 'N'
		where
			FREE_LECTURE_NO = #{value}
	</update>
	
	<update id="recoverFreeLectureByNo" parameterType="int">
		update
			FREE_LECTURE
		set
			LECTURE_AVAILABLE = 'Y'
		where
			FREE_LECTURE_NO = #{value}
	</update>
	
	<select id="getAllQnasByCriteria" parameterType="Criteria" resultMap="getQnaByNoResultMap">
		select
			A.rn,
			A.QNA_NO,
			A.QNA_TITLE,
			A.QNA_WRITER,
			A.QNA_CONTENTS,
			A.QNA_CREATE_DATE,
			A.QNA_VIEWS,
			A.QNA_AVAILABLE
		from (
				select
					rownum as rn,
					B.QNA_NO,
					B.QNA_TITLE,
					B.QNA_WRITER,
					B.QNA_CONTENTS,
					B.QNA_CREATE_DATE,
					B.QNA_VIEWS,
					B.QNA_AVAILABLE
				from (
						select
							QNA_NO,
							QNA_TITLE,
							QNA_WRITER,
							QNA_CONTENTS,
							QNA_CREATE_DATE,
							QNA_VIEWS,
							QNA_AVAILABLE
						from
							QNA
						order by 
							QNA_NO desc) B
				where
					rownum &lt;= #{endIndex}) A
		where
			A.rn &gt;= #{beginIndex}
	</select>
	
	<select id="getAllQnaAnswersByCriteria" parameterType="Criteria" resultMap="getAnswerByNoResultMap">
		select
			A.rn,
			A.ANSWER_NO,
			A.ANSWER_WRITER,
		    <![CDATA[REGEXP_REPLACE(A.ANSWER_CONTENTS,'<[^>]*>','') as ANSWER_CONTENTS]]>,
			A.ANSWER_CREATE_DATE,
			A.QNA_NO,
			A.ANSWER_AVAILABLE
		from (
				select
					rownum as rn,
					B.ANSWER_NO,
					B.ANSWER_WRITER,
					B.ANSWER_CONTENTS,
					B.ANSWER_CREATE_DATE,
					B.QNA_NO,
					B.ANSWER_AVAILABLE
				from (
						select
							ANSWER_NO,
							ANSWER_WRITER,
							ANSWER_CONTENTS,
							ANSWER_CREATE_DATE,
							QNA_NO,
							ANSWER_AVAILABLE
						from
							QNA_ANSWER
						order by
							ANSWER_NO desc) B
				where
					rownum &lt;= #{endIndex }) A
		where
			A.rn &gt;= #{beginIndex }
	</select>
	
	<select id="getQnaByNo" parameterType="int" resultType="Qna">
		select
			QNA_NO			as no,
			QNA_TITLE		as title,
			QNA_CONTENTS	as contents,
			QNA_VIEWS		as views,
			QNA_AVAILABLE	as available,
			QNA_CREATE_DATE	as createDate
		from
			QNA
		where
			QNA_NO = #{value}
	</select>
	
	<update id="updateQna" parameterType="Qna">
		update
			QNA
		set
			QNA_TITLE		= #{title},
			QNA_CONTENTS	= #{contents},
			QNA_VIEWS		= #{views},
			QNA_AVAILABLE	= #{available},
			QNA_CREATE_DATE	= #{createDate}
		where
			QNA_NO = #{no}
	</update>
	
	<select id="getQnaAnswerByNo" parameterType="int" resultType="QnaAnswer">
		select
			ANSWER_NO			as no,
			ANSWER_CONTENTS		as contents,
			ANSWER_CREATE_DATE	as createDate,
			QNA_NO				as qnaNo,
			ANSWER_AVAILABLE	as available
		from
			QNA_ANSWER
		where
			ANSWER_NO = #{value}
	</select>
	
	<update id="updateQnaAnswer" parameterType="QnaAnswer">
		update
			QNA_ANSWER
		set
			ANSWER_CONTENTS		= #{contents},
			ANSWER_CREATE_DATE	= #{createDate},
			QNA_NO				= #{qnaNo},
			ANSWER_AVAILABLE	= #{available}
		where
			ANSWER_NO 			= #{no}
	</update>
	
	<select id="getAllNotices" resultType="Notice">
		select
			ROW_NUMBER() over (order by NOTICE_CREATE_DATE desc) as rn,
			NOTICE_NO											 as no,
			NOTICE_TITLE										 as title,
			NOTICE_CONTENTS										 as contents,
			NOTICE_CREATE_DATE									 as createDate,
			NOTICE_AVAILABLE									 as available
		from
			NOTICE
	</select>
	
	<select id="getNoticeByNo" parameterType="int" resultType="Notice">
		select
			NOTICE_NO			as no,
			NOTICE_TITLE		as title,
			NOTICE_CONTENTS		as contents,
			NOTICE_CREATE_DATE	as createDate,
			NOTICE_AVAILABLE	as available
		from
			NOTICE
		where
			NOTICE_NO = #{value}
	</select>
	
	<insert id="insertNewNotice" parameterType="Notice">
		insert into	NOTICE
			(NOTICE_NO, NOTICE_TITLE, NOTICE_CONTENTS, NOTICE_CREATE_DATE, NOTICE_AVAILABLE)
		values
			(notice_sequence.nextval , #{title}, #{contents}, sysdate, 1)
	</insert>
	
	<update id="updateNotice" parameterType="Notice">
		update
			NOTICE
		set
			NOTICE_TITLE		= #{title},
			NOTICE_CONTENTS		= #{contents},
			NOTICE_AVAILABLE	= #{available}
		where
			NOTICE_NO			= #{no}
	</update>
	
	<select id="getAllPaidLecturesDetail" resultMap="getPaidLectureAndInstructor">
		select
			PAID_LECTURE_NO,
			INSTRUCTOR_NO,
			LECTURE_LANG,
			LECTURE_TITLE,
			LECTURE_LEVEL,
			LECTURE_SPECIALIZED,
			LECTURE_SUMMARY,
			LECTURE_DESCRIPTION,
			LECTURE_PRICE,
			LECTURE_THUMNAIL_PATH,
			LECTURE_CREATE_DATE,
			LECTURE_LIKES,
			LECTURE_VIEW_COUNT,
			EXPOSURE_STATUS,
			APPROVE_STATUS
		from
			PAID_LECTURE
		order by
			PAID_LECTURE_NO desc
	</select>
	
	<select id="getPaidLectureByNo" parameterType="int" resultType="PaidLecture">
		select
			PAID_LECTURE_NO			as "no",
			LECTURE_LANG			as lang,
			LECTURE_TITLE			as title,
			LECTURE_LEVEL			as "level",
			LECTURE_SPECIALIZED		as specialized,
			LECTURE_SUMMARY			as summary,
			LECTURE_DESCRIPTION		as description,
			LECTURE_PRICE			as price,
			LECTURE_THUMNAIL_PATH	as thumbnail,
			LECTURE_CREATE_DATE 	as createDate,
			LECTURE_LIKES			as "like",
			LECTURE_VIEW_COUNT		as viewCount,
			EXPOSURE_STATUS			as exposureStatus,
			APPROVE_STATUS			as approveStatus
		from
			PAID_LECTURE
		where
			PAID_LECTURE_NO = #{value}
	</select>
	
	<update id="updatePaidLectureByNo" parameterType="PaidLecture">
		update
			PAID_LECTURE
		set
			LECTURE_LANG			= #{lang},
			LECTURE_TITLE			= #{title},
			LECTURE_LEVEL			= #{level},
			LECTURE_SPECIALIZED		= #{specialized},
			LECTURE_SUMMARY			= #{summary},
			LECTURE_DESCRIPTION		= #{description},
			LECTURE_PRICE			= #{price},
			LECTURE_THUMNAIL_PATH	= #{thumbnail},
			LECTURE_CREATE_DATE 	= #{createDate},
			LECTURE_LIKES			= #{like},
			LECTURE_VIEW_COUNT		= #{viewCount},
			EXPOSURE_STATUS			= #{exposureStatus},
			APPROVE_STATUS			= #{approveStatus}
		where
			PAID_LECTURE_NO			= #{no}
	</update>
	
	<select id="getVisitorSevenDaysCount" resultType="VisitorCount">
		select
			to_char(LOG_CREATE_DATE, 'YYYYMMDD') as createDate,
			count(distinct(LOG_IP)) 			 as "count"
		from
			USER_LOG
		where
			to_char(LOG_CREATE_DATE, 'YYYYMMDD') &lt;= to_char(sysdate, 'YYYYMMDD') and to_char(LOG_CREATE_DATE, 'YYYYMMDD') &gt;= to_char(sysdate - 7, 'YYYYMMDD')
		group by
			to_char(LOG_CREATE_DATE, 'YYYYMMDD')
	</select>
	
	<select id="getInstructorByNo" parameterType="int" resultMap="InstructorInfo">
		select
			INSTRUCTOR_NO,
			USER_NO,
			INSTRUCTOR_SUMMARY,
			INSTRUCTOR_DESCRIPTION
		from
			INSTRUCTOR
		where
			INSTRUCTOR_NO = #{value}
	</select>
	
	<select id="getAllInstructors" resultMap="InstructorInfo">
		select
			INSTRUCTOR_NO,
			USER_NO,
			INSTRUCTOR_SUMMARY,
			INSTRUCTOR_DESCRIPTION
		from
			INSTRUCTOR
		order by
			INSTRUCTOR_NO asc
	</select>
	
	<select id="getAllSumPaid" resultType="PaidLecture">
		select
			SUM(B.LECTURE_PRICE) as price
		from
			BUY_LECTURE A, PAID_LECTURE B
		where
			A.PAID_LECTURE_NO = B.PAID_LECTURE_NO
	</select>

	<select id="getPopularLang" resultType="PaidLecture">
		select
			B.LECTURE_LANG			as lang,
			COUNT(B.LECTURE_LANG)	as "no"
		from
			BUY_LECTURE A, PAID_LECTURE B
		where
			A.PAID_LECTURE_NO = B.PAID_LECTURE_NO
		group by
			b.LECTURE_LANG
		order by
			COUNT(B.LECTURE_LANG) DESC
	</select>
	
</mapper>